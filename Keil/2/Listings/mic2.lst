C51 COMPILER V9.60.0.0   MIC2                                                              06/19/2020 12:01:46 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MIC2
OBJECT MODULE PLACED IN .\Objects\mic2.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Keil\C51\BIN\C51.EXE mic2.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\mic2.lst) TABS(2) OBJECT(.\Objects\mic2.obj)

line level    source

   1          #include <REGX52.H>
   2          #include <string.h>
   3          
   4          #define TRUE 1
   5          #define SERIAL_MODE P3_4  // 0 odbiór, 1 nadawanie
   6          #define MAX_BUF_SIZE 20   // max rozmiar bufora
   7          #define POWER_LEFT P2_0
   8          #define POWER_RIGHT P2_1
   9          
  10          /* -----------------ZMIENNE/STALE KOMUNIKACJI----------------- */
  11          
  12          // Komendy nadajace
  13          unsigned char code S_COMMAND1[] = "<3_display&*>";
  14          
  15          // Komendy odbierane
  16          unsigned char code R_COMMAND1[] = "<2_display12>";
  17          
  18          // Bufor odbioru
  19          unsigned char data rcvBuf[MAX_BUF_SIZE] = {0};  
  20          unsigned char data sndBuf[MAX_BUF_SIZE] = {0};
  21          
  22          // Licznik dla RcvBuf
  23          unsigned char data rcvIndex;
  24          
  25          /* -----------------ZMIENNE/STALE POZOSTALE----------------- */
  26          
  27          // Tablica cyfr 0 - 9
  28          unsigned char code NUMBERS[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
  29          
  30          
  31          // Zmienne dla wyswietlanych wartosci
  32          unsigned char data counterD;
  33          unsigned char data counterJ;
  34            
  35          /* -----------------FUNKCJE POMOCNICZE----------------- */
  36          
  37          void executeCommand();
  38          void clearRcvBuf();
  39          void display();
  40          void send(unsigned char);
  41          void Init();
  42          
  43          /* -----------------PRZERWANIA----------------- */
  44          
  45          void ISR_INT0(void) interrupt 0 {
  46   1        unsigned char i = 0;
  47   1        unsigned char commandLength = strlen(S_COMMAND1);
  48   1        for (i; i < commandLength; i++) {
  49   2          if (S_COMMAND1[i] == '&') {
  50   3            sndBuf[i] = counterD;
  51   3          } else if (S_COMMAND1[i] == '*') {
  52   3            sndBuf[i] = counterJ;
  53   3          } else {
  54   3            sndBuf[i] = S_COMMAND1[i];
C51 COMPILER V9.60.0.0   MIC2                                                              06/19/2020 12:01:46 PAGE 2   

  55   3          }
  56   2        }
  57   1        i = 0;
  58   1        for (i; i < commandLength; i++) {
  59   2          send(sndBuf[i]);
  60   2          sndBuf[i] = 0;
  61   2        }
  62   1      }
  63          
  64          // Przerwanie z portu szeregowego - odczyt danych
  65          void ISR_SERIAL(void) interrupt 4 { 
  66   1        if (RI == 1) {
  67   2          if (SBUF == '<') {
  68   3            clearRcvBuf();
  69   3          }
  70   2          if (rcvIndex > -1 && rcvIndex < MAX_BUF_SIZE) {
  71   3            rcvBuf[rcvIndex++] = SBUF;
  72   3            if (SBUF == '>') {
  73   4              executeCommand();
  74   4            }
  75   3          }
  76   2        }
  77   1        RI = 0;
  78   1      } 
  79          
  80          
  81          /* -----------------PROGRAM GLOWNY----------------- */
  82          
  83          void main(void) {
  84   1      
  85   1        Init();
  86   1        
  87   1        while(TRUE) {
  88   2          display();
  89   2        }
  90   1      }
  91          
  92          /* -----------------CIALA FUNKCJI POMOCNICZYCH----------------- */
  93          
  94          // Funkcja sprawdzajaca ktora komenda zostala odebrana
  95          void executeCommand(void) {
  96   1        
  97   1        // R_COMMAND1
  98   1        if ((!strncmp(rcvBuf, R_COMMAND1, 10)) && rcvBuf[12] == '>') {
  99   2          if (rcvBuf[10] == 0x0A) {
 100   3            counterJ = 0x00;
 101   3          } else {
 102   3            counterJ = rcvBuf[10];
 103   3          }
 104   2            
 105   2          if (rcvBuf[11] == 0x0A) {
 106   3            counterD = 0x00;
 107   3          } else {
 108   3            counterD = rcvBuf[11];
 109   3          }
 110   2        }
 111   1      }
 112          
 113          // Funkcja czysci zawartosc bufora odbiorcy
 114          void clearRcvBuf(void) {
 115   1        rcvIndex = 0; 
 116   1        for (rcvIndex; rcvIndex < sizeof(rcvBuf); rcvIndex++) {
C51 COMPILER V9.60.0.0   MIC2                                                              06/19/2020 12:01:46 PAGE 3   

 117   2          rcvBuf[rcvIndex] = 0;
 118   2        }
 119   1        rcvIndex = 0;
 120   1      }
 121          
 122          // Funkcja wyswietlajaca zawartosc buforow na wyswietlaczu
 123          void display(void) {
 124   1        unsigned char i = 0;
 125   1        for(i; i < 200; i++) {  
 126   2          POWER_LEFT = 1;
 127   2          POWER_RIGHT = 1;
 128   2          P0 = NUMBERS[counterD];
 129   2          POWER_LEFT = 0;
 130   2          POWER_LEFT = 1; 
 131   2          P0 = NUMBERS[counterJ];
 132   2          POWER_RIGHT = 0;
 133   2          POWER_RIGHT = 1;
 134   2        }
 135   1      }
 136          
 137          
 138          // Funkcja wysylajaca dany znak przez magistrale
 139          void send(unsigned char value) {
 140   1        SERIAL_MODE = 1;              // tryb nadawania
 141   1        ES = 0;                       // wylaczenie nasluchu odbierania danych
 142   1        TI = 0;                       
 143   1        SBUF = value;                 // zaladuj znak do bufora
 144   1        while(TI == 0); 
 145   1        TI = 0;
 146   1        ES = 1;                       // ponowne wlaczenie nasluchu odbierania danych
 147   1        SERIAL_MODE = 0;              // tryb odbioru
 148   1      }
 149          
 150          // Funkcja inicjujaca
 151          void Init(void) {
 152   1        
 153   1        // USTAWIENIA OGOLNE
 154   1        SERIAL_MODE = 0;          // przejdz w tryb odbioru
 155   1        rcvIndex = 0;             // licznik bufora odbioru na 0
 156   1        SCON = 0x50;              // konfiguracja portu szeregowego
 157   1        T2CON = 0x30;             // konfiguracja Timera 2 
 158   1        RCAP2L = TL2 = 0xDC;      // konfiguracja predkosci nadawania i odbioru 
 159   1        RCAP2H = TH2 = 0xFF;      // danych przez port szeregowy
 160   1        TR2 = 1;                  // timer 2 => ON taktowanie portu szeregowego
 161   1        RI = TI = 0;              // gaszenie flag odbiornika i nadajnika
 162   1        ES  = 1;                  // wlacz przerwania z portu szeregowego
 163   1        EX0 = 1;                  // zalacz przerwanie od INT0
 164   1        IT0 = 1;                  // aktywnosc na zbocze opadajace H --> L
 165   1        EA  = 1;                  // wlacz maske przerwan
 166   1        
 167   1        // USTAWIENIA POZOSTALE
 168   1        counterD = 0x00;
 169   1        counterJ = 0x00;
 170   1        POWER_LEFT = 0;
 171   1        POWER_RIGHT = 1;
 172   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    467    ----
   CONSTANT SIZE    =     38    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   MIC2                                                              06/19/2020 12:01:46 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
