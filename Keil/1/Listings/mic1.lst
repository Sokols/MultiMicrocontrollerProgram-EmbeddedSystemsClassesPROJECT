C51 COMPILER V9.60.0.0   MIC1                                                              06/19/2020 12:01:45 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MIC1
OBJECT MODULE PLACED IN .\Objects\mic1.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Keil\C51\BIN\C51.EXE mic1.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\mic1.lst) TABS(2) OBJECT(.\Objects\mic1.obj)

line level    source

   1          #include <REGX52.H>
   2          #include <string.h>
   3          
   4          #define TRUE 1
   5          #define SERIAL_MODE P3_4  // 0 odbiór, 1 nadawanie
   6          #define MAX_BUF_SIZE 20   // max rozmiar bufora
   7          #define X 100             // parametry dla funkcji delay
   8          #define Y 200
   9          
  10          /* -----------------ZMIENNE/STALE KOMUNIKACJI----------------- */
  11          
  12          // Komendy nadajace
  13          unsigned char code S_COMMAND1[] = "<2_display&*>";
  14          
  15          // Komendy odbierane
  16          unsigned char code R_COMMAND1[] = "";
  17          
  18          // Bufor odbioru i nadawania
  19          unsigned char data rcvBuf[MAX_BUF_SIZE] = {0};
  20          unsigned char data sndBuf[MAX_BUF_SIZE] = {0};
  21          
  22          // Licznik dla RcvBuf
  23          unsigned char data rcvIndex;
  24          
  25          /* -----------------ZMIENNE/STALE POZOSTALE----------------- */
  26          
  27          // Tablica sprawdzen napiec na liniach klawiatury
  28          unsigned char code CHECK_LINE[4] = {0xEF, 0xDF, 0xBF, 0x7F};
  29          
  30          // Tablica numerow
  31          unsigned char code NUMBERS[4][3] = {
  32              0x01, 0x02, 0x03, 
  33              0x04, 0x05, 0x06,
  34              0x07, 0x08, 0x09,
  35              0x0A, 0x0A, 0x0A};
  36              
  37          // Tablica buforow - dla obu wyswietlaczy
  38          unsigned char data buf[2];
  39          
  40          // Licznik dla CHECK_LINE
  41          unsigned char data tabIndex;
  42          
  43          // Flaga dla diody
  44          unsigned char data diodeFlag;
  45              
  46          /* -----------------FUNKCJE POMOCNICZE----------------- */
  47              
  48          void delay();
  49          void setDiode();
  50          void handlePressing();
  51          void send(unsigned char);
  52          void updateDisplay();
  53          void Init();
  54          
C51 COMPILER V9.60.0.0   MIC1                                                              06/19/2020 12:01:45 PAGE 2   

  55          /* -----------------PRZERWANIA----------------- */
  56          
  57          // Przerwanie z portu szeregowego - odczyt danych
  58          void ISR_SERIAL(void) interrupt 4 { 
  59   1        // program nie obsluguje zadnych komend
  60   1      } 
  61          
  62          /* -----------------PROGRAM GLOWNY----------------- */
  63          
  64          void main(void) {
  65   1      
  66   1        Init();
  67   1        
  68   1        while(TRUE) {
  69   2          P2 = CHECK_LINE[tabIndex];
  70   2          
  71   2          if (P2 != CHECK_LINE[tabIndex]) {
  72   3            setDiode();
  73   3            handlePressing();
  74   3            updateDisplay();
  75   3          }
  76   2          if (++tabIndex == 4) { 
  77   3            tabIndex = 0; 
  78   3          }
  79   2          delay();
  80   2        }
  81   1      }
  82          
  83          /* -----------------CIALA FUNKCJI POMOCNICZYCH----------------- */
  84              
  85          // Funkcja opozniajaca odczytywanie wcisnietych wartosci
  86          void delay(void) {
  87   1        int x = 0, y = 0;
  88   1        for (x; x < X; x++) {
  89   2          for (y; y < Y; y++) {;}
  90   2        }
  91   1      }
  92          
  93          // Funkcja gaszaca/zapalajaca diode
  94          void setDiode(void) {
  95   1        diodeFlag = !diodeFlag;
  96   1        P0_0 = diodeFlag;
  97   1      }
  98          
  99          // Funkcja aktualizujaca bufory po wykryciu wcisniecia przycisku
 100          void handlePressing(void) {
 101   1        
 102   1        // Klawisz * - nic nie rob
 103   1        if (P2_3 == 0 && P2_7 == 0) { ;; }
 104   1        
 105   1        // Klawisz # - wyzeruj bufory
 106   1        else if (P2_1 == 0 && P2_7 == 0) {
 107   2          buf[0] = 0;
 108   2          buf[1] = 0;
 109   2        } 
 110   1        
 111   1        // Klawisze cyfr - przypisz do buforow
 112   1        else {
 113   2          buf[1] = buf[0];        
 114   2          // przypisanie cyfry z 1. kolumny
 115   2          if (P2_3 == 0) { buf[0] = NUMBERS[tabIndex][0]; }
 116   2          // przypisanie cyfry z 2. kolumny
C51 COMPILER V9.60.0.0   MIC1                                                              06/19/2020 12:01:45 PAGE 3   

 117   2          else if (P2_2 == 0) { buf[0] = NUMBERS[tabIndex][1]; }
 118   2          // przypisanie cyfry z 3. kolumny
 119   2          else { buf[0] = NUMBERS[tabIndex][2]; }
 120   2        }
 121   1      }
 122          
 123          // Funkcja wysylajaca dany znak przez magistrale
 124          void send(unsigned char value) {
 125   1        SERIAL_MODE = 1;              // tryb nadawania
 126   1        ES = 0;                       // wylaczenie nasluchu odbierania danych
 127   1        TI = 0;                       
 128   1        SBUF = value;                 // zaladuj znak do bufora
 129   1        while(TI == 0); 
 130   1        TI = 0;
 131   1        ES = 1;                       // ponowne wlaczenie nasluchu odbierania danych
 132   1        SERIAL_MODE = 0;              // tryb odbioru
 133   1      }
 134          
 135          // Funkcja wysylajaca aktualne bufory do 2. mikrokontrolera
 136          void updateDisplay(void) {
 137   1      
 138   1        unsigned char i = 0;
 139   1        unsigned char commandLength = strlen(S_COMMAND1);
 140   1        for (i; i < commandLength; i++) {
 141   2          if (S_COMMAND1[i] == '&') {
 142   3            sndBuf[i] = buf[0];
 143   3          } else if (S_COMMAND1[i] == '*') {
 144   3            sndBuf[i] = buf[1];
 145   3          } else {
 146   3            sndBuf[i] = S_COMMAND1[i];
 147   3          }
 148   2        }
 149   1        i = 0;
 150   1        for (i; i < commandLength; i++) {
 151   2          send(sndBuf[i]);
 152   2          sndBuf[i] = 0;
 153   2        }
 154   1      }
 155          
 156          // Funkcja inicjujaca
 157          void Init(void) {
 158   1        
 159   1        // USTAWIENIA OGOLNE
 160   1        SERIAL_MODE = 0;          // przejdz w tryb odbioru
 161   1        rcvIndex = 0;             // licznik bufora odbioru na 0
 162   1        SCON = 0x50;              // konfiguracja portu szeregowego
 163   1        RCAP2L = TL2 = 0xDC;      // konfiguracja predkosci nadawania i odbioru 
 164   1        RCAP2H = TH2 = 0xFF;      // danych przez port szeregowy
 165   1        T2CON = 0x30;             // konfiguracja Timera 2 
 166   1        RI = TI = 0;              // gaszenie flag odbiornika i nadajnika
 167   1        ES  = 1;                  // wlacz przerwania z portu szeregowego
 168   1        EA  = 1;                  // wlacz maske przerwan
 169   1        TR2 = 1;                  // timer 2 => ON taktowanie portu szeregowego
 170   1        
 171   1        // USTAWIENIA POZOSTALE
 172   1        buf[0] = 0;
 173   1        buf[1] = 0;
 174   1        diodeFlag = 1;
 175   1        tabIndex = 0;
 176   1      }


C51 COMPILER V9.60.0.0   MIC1                                                              06/19/2020 12:01:45 PAGE 4   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    327    ----
   CONSTANT SIZE    =     31    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     45       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
